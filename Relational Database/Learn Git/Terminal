camper: /project$ echo hello git
camper: /project$ mkdir sql_reference
camper: /project$ cd sql_reference
camper: /sql_reference$ git init # initiate git into the folder
camper: /sql_reference$ ls -a # View list, including hidden. .git has been created
camper: /sql_reference$ git status # View current status of git
camper: /sql_reference$ git checkout -b main # Switch to a new branch 'main'
camper: /sql_reference$ touch README.md # Create Readme. This file describes what the repo is for
camper: /sql_reference$ git add README.md # Add file to staging area. First step to start tracking the file using git.
camper: /sql_reference$ touch sql_reference.json
camper: /sql_reference$ git add sql_reference.json 
camper: /sql_reference$ git commit -m "Initial commit" # Commit that files that are in staging area. -m is for the message
camper: /sql_reference$ git log # To check commit history
camper: /sql_reference$ git diff # To see the latest changes
camper: /sql_reference$ git branch # To see current branches in the repo
camper: /sql_reference$ git branch feat/add-create-table-reference # Create branch. Branch names often start with fix / feat, and can't contain spaces
# This new branch will be a clone of main since that's the branch you were on when you created the new branch
camper: /sql_reference$ git checkout feat/add-create-table-reference # Switch to the branch
camper: /sql_reference$ git log --oneline # To check concise commit history
camper: /sql_reference$ git checkout main # Switch to maine branch
camper: /sql_reference$ git merge feat/add-create-table-reference # Merge branch: bring changes from the specified branch to the branch you're on
camper: /sql_reference$ git branch -d feat/add-create-table-reference # Delete branch
# The process is to create a branch, make the changes you want, commit them, and then merge the changes into branch you started on. 
camper: /sql_reference$ git add . # Adds all the files to staging
camper: /sql_reference$ git rebase main # Update this branch so it has the same commits from main, but you can't just merge that branch into this one. You need that bug fix commit to be in the same order here as it is on main. You need to rebase this branch against main to do that.
# To be more specific, a rebase will "rewind" this branch to where it last matched main, then, add the commits from main that aren't here. After that, it adds the commits you made to this branch on top.
# Sometimes conflicts can arise while rebasing. You will need to resolve them manually, add file to staging, and then continue. git stauts can let you know about the status of rebasing if its stuck.
camper: /sql_reference$ git rebase --continue
camper: /sql_reference$ git stash # Stash changes that were added, but were not suppossed to be on this branch
camper: /sql_reference$ git stash list # List of changes that are stashed
camper: /sql_reference$ git stash pop # Adds back changes from latest stash, and removes it from stash
camper: /sql_reference$ git stash show # Shows changes in the current stash
camper: /sql_reference$ git stash show -p # Shows full changes in the latest stash. -p stands for patch
camper: /sql_reference$ git stash apply # Applies changes from latest stash, but keeps it in stash list
camper: /sql_reference$ git stash show stash@{1} # To show changes from specific stash
camper: /sql_reference$ git stash drop stash@{0} # To drop specific stash
camper: /sql_reference$ git reset HEAD~1 # To go back one commit before HEAD. Changes are added to the working tree. You may add to staging and commit again
# Use --hard flag to make it go away for good. --soft flag adds to the working tree
camper: /sql_reference$ git revert HEAD # To revert the most recent commit. Commit stays in history. Basically adds another commit which is exact opposite of the changes
camper: /sql_reference$ git show # Shows latest commit
camper: /sql_reference$ git show HEAD~1 # Shows one commit before the latest commit
camper: /sql_reference$ git rebase --interactive HEAD~2 # Enter interactive mode to rebase the branch. HEAD~2 means we are comparing with the branch two commits back
camper: /sql_reference$ git rebase --interactive --root # -root flag means you're going back to the origin
# interactive changes Hash of the commits. So would not align with the main anymore. 
# Do rebase to make sure everything aligns
# Squashing commits -- combining together a bunch of commits to clean up commit history
camper: /sql_reference$ touch .env # .env files are used to store environment variables for running code. Often times, there may be sensitive information in it.
camper: /sql_reference$ touch .gitignore # Files added in this will be ignored by git. .env is often added here